{
  "info": {
    "_postman_id": "7a7e0f9c-8e8c-4d2f-9e2e-6f9c8e8c4d2f",
    "name": "Backend API",
    "description": "Complete API documentation for the Backend service",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:4000/api/v1",
      "type": "string"
    },
    {
      "key": "accessToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "refreshToken",
      "value": "",
      "type": "string"
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Add current timestamp to request body if needed",
          "if (pm.request.body && pm.request.body.mode === 'raw') {",
          "    const body = JSON.parse(pm.request.body.raw);",
          "    if (body.timestamp === '{{$timestamp}}') {",
          "        body.timestamp = new Date().toISOString();",
          "        pm.request.body.raw = JSON.stringify(body);",
          "    }",
          "}"
        ]
      }
    }
  ],
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{accessToken}}",
        "type": "string"
      }
    ]
  },
  "item": [
    {
      "name": "Auth",
      "item": [
        {
          "name": "Register",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has required properties\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.eql('success');",
                  "    pm.expect(jsonData.data).to.have.property('accessToken');",
                  "    pm.expect(jsonData.data).to.have.property('refreshToken');",
                  "    pm.expect(jsonData.data).to.have.property('user');",
                  "",
                  "    // Store tokens for subsequent requests",
                  "    pm.environment.set('accessToken', jsonData.data.accessToken);",
                  "    pm.environment.set('refreshToken', jsonData.data.refreshToken);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"test@example.com\",\n    \"password\": \"Password123!\",\n    \"firstName\": \"Test\",\n    \"lastName\": \"User\",\n    \"deviceInfo\": {\n        \"deviceId\": \"test-device\",\n        \"deviceType\": \"web\",\n        \"platform\": \"web\"\n    }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/register",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "register"
              ]
            },
            "description": "Register a new user"
          }
        },
        {
          "name": "Login",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has required properties\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.eql('success');",
                  "    pm.expect(jsonData.data).to.have.property('accessToken');",
                  "    pm.expect(jsonData.data).to.have.property('refreshToken');",
                  "    pm.expect(jsonData.data).to.have.property('user');",
                  "",
                  "    // Store tokens for subsequent requests",
                  "    pm.environment.set('accessToken', jsonData.data.accessToken);",
                  "    pm.environment.set('refreshToken', jsonData.data.refreshToken);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"test@example.com\",\n    \"password\": \"Password123!\",\n    \"deviceInfo\": {\n        \"deviceId\": \"test-device\",\n        \"deviceType\": \"web\",\n        \"platform\": \"web\"\n    }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "login"
              ]
            },
            "description": "Login with user credentials"
          }
        },
        {
          "name": "Refresh Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has new tokens\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.eql('success');",
                  "    pm.expect(jsonData.data).to.have.property('accessToken');",
                  "    pm.expect(jsonData.data).to.have.property('refreshToken');",
                  "",
                  "    // Update stored tokens",
                  "    pm.environment.set('accessToken', jsonData.data.accessToken);",
                  "    pm.environment.set('refreshToken', jsonData.data.refreshToken);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"refreshToken\": \"{{refreshToken}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/refresh-token",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "refresh-token"
              ]
            },
            "description": "Refresh access token using refresh token"
          }
        },
        {
          "name": "Logout",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Logout successful\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.eql('success');",
                  "    pm.expect(jsonData.data.success).to.be.true;",
                  "",
                  "    // Clear stored tokens",
                  "    pm.environment.set('accessToken', '');",
                  "    pm.environment.set('refreshToken', '');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"refreshToken\": \"{{refreshToken}}\",\n    \"allDevices\": false\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/logout",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "logout"
              ]
            },
            "description": "Logout user and invalidate tokens"
          }
        }
      ]
    },
    {
      "name": "Customers",
      "item": [
        {
          "name": "Create Customer",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Customer created successfully\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.eql('success');",
                  "    pm.expect(jsonData.data).to.have.property('id');",
                  "    ",
                  "    // Store customer ID for subsequent requests",
                  "    pm.environment.set('customerId', jsonData.data.id);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"John Doe\",\n    \"phoneNumber\": \"+1234567890\",\n    \"countryCode\": \"US\",\n    \"assignedAdmin\": \"{{userId}}\",\n    \"status\": \"active\",\n    \"customFields\": {\n        \"company\": \"Acme Inc\",\n        \"position\": \"Manager\"\n    },\n    \"tags\": [\"vip\", \"enterprise\"]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/customers",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "customers"
              ]
            },
            "description": "Create a new customer"
          }
        },
        {
          "name": "Get Customer",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Customer details are correct\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.eql('success');",
                  "    pm.expect(jsonData.data).to.have.property('id');",
                  "    pm.expect(jsonData.data.name).to.be.a('string');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/customers/{{customerId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "customers",
                "{{customerId}}"
              ]
            },
            "description": "Get customer by ID"
          }
        },
        {
          "name": "Update Customer",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Customer updated successfully\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.eql('success');",
                  "    pm.expect(jsonData.data.name).to.eql('John Smith');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"John Smith\",\n    \"customFields\": {\n        \"position\": \"Senior Manager\"\n    }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/customers/{{customerId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "customers",
                "{{customerId}}"
              ]
            },
            "description": "Update customer details"
          }
        },
        {
          "name": "Delete Customer",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 204\", function () {",
                  "    pm.response.to.have.status(204);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "url": {
              "raw": "{{baseUrl}}/customers/{{customerId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "customers",
                "{{customerId}}"
              ]
            },
            "description": "Delete customer"
          }
        },
        {
          "name": "Get Statistics",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Statistics have required properties\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.eql('success');",
                  "    pm.expect(jsonData.data).to.have.property('statusDistribution');",
                  "    pm.expect(jsonData.data).to.have.property('groupDistribution');",
                  "    pm.expect(jsonData.data).to.have.property('timeline');",
                  "    pm.expect(jsonData.data).to.have.property('total');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/customers/statistics?fromDate={{startDate}}&toDate={{endDate}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "customers",
                "statistics"
              ],
              "query": [
                {
                  "key": "fromDate",
                  "value": "{{startDate}}"
                },
                {
                  "key": "toDate",
                  "value": "{{endDate}}"
                }
              ]
            },
            "description": "Get customer statistics with optional date range"
          }
        },
        {
          "name": "Batch Update Customers",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Batch update successful\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.eql('success');",
                  "    pm.expect(jsonData.data.modifiedCount).to.be.a('number');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"updates\": [\n        {\n            \"id\": \"{{customerId1}}\",\n            \"data\": {\n                \"status\": \"inactive\"\n            }\n        },\n        {\n            \"id\": \"{{customerId2}}\",\n            \"data\": {\n                \"status\": \"inactive\"\n            }\n        }\n    ]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/customers/batch",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "customers",
                "batch"
              ]
            },
            "description": "Update multiple customers in a single request"
          }
        }
      ]
    },
    {
      "name": "Customer Groups",
      "item": [
        {
          "name": "Create Group",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Group created successfully\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.eql('success');",
                  "    pm.expect(jsonData.data).to.have.property('id');",
                  "    ",
                  "    // Store group ID for subsequent requests",
                  "    pm.environment.set('groupId', jsonData.data.id);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"VIP Customers\",\n    \"description\": \"High-value customers group\",\n    \"customFields\": [\n        {\n            \"name\": \"accountManager\",\n            \"type\": \"text\",\n            \"required\": true\n        },\n        {\n            \"name\": \"lastMeeting\",\n            \"type\": \"date\"\n        }\n    ],\n    \"metadata\": {\n        \"category\": \"vip\",\n        \"priority\": \"high\"\n    }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/customers/groups",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "customers",
                "groups"
              ]
            },
            "description": "Create a new customer group"
          }
        },
        {
          "name": "Update Group",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Group updated successfully\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.eql('success');",
                  "    pm.expect(jsonData.data.name).to.eql('Premium VIP Customers');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"Premium VIP Customers\",\n    \"description\": \"Updated description for high-value customers\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/customers/groups/{{groupId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "customers",
                "groups",
                "{{groupId}}"
              ]
            },
            "description": "Update customer group details"
          }
        },
        {
          "name": "Get Group",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Group details are correct\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.eql('success');",
                  "    pm.expect(jsonData.data).to.have.property('id');",
                  "    pm.expect(jsonData.data).to.have.property('customFields');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/customers/groups/{{groupId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "customers",
                "groups",
                "{{groupId}}"
              ]
            },
            "description": "Get customer group by ID"
          }
        },
        {
          "name": "List Groups",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Groups list has required properties\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.eql('success');",
                  "    pm.expect(jsonData.data).to.have.property('groups');",
                  "    pm.expect(jsonData.data).to.have.property('total');",
                  "    pm.expect(jsonData.data).to.have.property('pages');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/customers/groups?page=1&limit=10&search=vip",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "customers",
                "groups"
              ],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                },
                {
                  "key": "search",
                  "value": "vip"
                }
              ]
            },
            "description": "List customer groups with pagination and search"
          }
        },
        {
          "name": "Add Customers to Group",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Customers added successfully\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.eql('success');",
                  "    pm.expect(jsonData.data.customersCount).to.be.above(0);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerIds\": [\"{{customerId1}}\", \"{{customerId2}}\"]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/customers/groups/{{groupId}}/customers",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "customers",
                "groups",
                "{{groupId}}",
                "customers"
              ]
            },
            "description": "Add customers to a group"
          }
        },
        {
          "name": "Remove Customers from Group",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Customers removed successfully\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.eql('success');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerIds\": [\"{{customerId1}}\", \"{{customerId2}}\"]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/customers/groups/{{groupId}}/customers",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "customers",
                "groups",
                "{{groupId}}",
                "customers"
              ]
            },
            "description": "Remove customers from a group"
          }
        },
        {
          "name": "Delete Group",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 204\", function () {",
                  "    pm.response.to.have.status(204);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "url": {
              "raw": "{{baseUrl}}/customers/groups/{{groupId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "customers",
                "groups",
                "{{groupId}}"
              ]
            },
            "description": "Delete customer group"
          }
        }
      ]
    },
    {
      "name": "System",
      "item": [
        {
          "name": "Health Check",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Health check is successful\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.eql('ok');",
                  "    pm.expect(jsonData).to.have.property('memoryUsage');",
                  "    pm.expect(jsonData).to.have.property('uptime');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/health",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "health"
              ]
            },
            "description": "Check API health status"
          }
        },
        {
          "name": "System Info",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"System info is available\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('nodeVersion');",
                  "    pm.expect(jsonData).to.have.property('platform');",
                  "    pm.expect(jsonData).to.have.property('totalMemory');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/system-info",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "system-info"
              ]
            },
            "description": "Get system information (admin only)"
          }
        }
      ]
    }
  ]
}