openapi: 3.0.3
info:
  title: Enterprise Node.js Backend API
  description: |
    A highly scalable, secure, and maintainable Node.js backend API with robust authentication, 
    permission-based access control, and comprehensive audit logging.
  version: 1.0.0
  contact:
    name: karansxa
  license:
    name: ISC
    url: https://opensource.org/licenses/ISC

servers:
  - url: http://localhost:4000/api/v1
    description: Local Development
  - url: https://api.example.com/v1
    description: Production Environment

tags:
  - name: Authentication
    description: Authentication and authorization endpoints
  - name: Customers
    description: Customer management endpoints
  - name: Customer Groups
    description: Customer group management endpoints
  - name: System
    description: System and health check endpoints

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained from login or token refresh

  schemas:
    Error:
      type: object
      properties:
        status:
          type: string
          enum: [error]
        message:
          type: string
        code:
          type: string
        errors:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
              message:
                type: string
              code:
                type: string
              details:
                type: object
                additionalProperties: true

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 8
        deviceInfo:
          $ref: "#/components/schemas/DeviceInfo"

    RegisterRequest:
      type: object
      required:
        - email
        - password
        - firstName
        - lastName
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 8
        firstName:
          type: string
          minLength: 2
        lastName:
          type: string
          minLength: 2
        deviceInfo:
          $ref: "#/components/schemas/DeviceInfo"

    DeviceInfo:
      type: object
      properties:
        deviceId:
          type: string
        deviceType:
          type: string
        deviceName:
          type: string
        platform:
          type: string
        browserName:
          type: string
        browserVersion:
          type: string
        location:
          type: string

    AuthResponse:
      type: object
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string
        expiresIn:
          type: integer
        user:
          $ref: "#/components/schemas/User"

    User:
      type: object
      properties:
        _id:
          type: string
        email:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        roles:
          type: array
          items:
            type: string
            enum: [admin, staff, user]
        permissions:
          type: array
          items:
            type: string
        isActive:
          type: boolean
        lastLogin:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Customer:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        phoneNumber:
          type: string
        countryCode:
          type: string
        assignedAdmin:
          $ref: "#/components/schemas/AdminInfo"
        status:
          type: string
          enum: [active, inactive, pending, blocked]
        customFields:
          type: object
          additionalProperties: true
        groups:
          type: array
          items:
            $ref: "#/components/schemas/GroupInfo"
        tags:
          type: array
          items:
            type: string
        lastActivity:
          type: string
          format: date-time
        metadata:
          type: object
          additionalProperties: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    AdminInfo:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
        firstName:
          type: string
        lastName:
          type: string

    GroupInfo:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string

    CustomerGroup:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        customFields:
          type: array
          items:
            $ref: "#/components/schemas/CustomField"
        customersCount:
          type: integer
        metadata:
          type: object
          additionalProperties: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CustomField:
      type: object
      required:
        - name
        - type
      properties:
        name:
          type: string
        type:
          type: string
          enum: [text, number, date, boolean, list]
        required:
          type: boolean
        listOptions:
          type: array
          items:
            type: string
        defaultValue:
          type: string
        description:
          type: string

    CustomerStatistics:
      type: object
      properties:
        statusDistribution:
          type: array
          items:
            type: object
            properties:
              _id:
                type: string
              count:
                type: integer
        groupDistribution:
          type: array
          items:
            type: object
            properties:
              _id:
                type: string
              name:
                type: string
              count:
                type: integer
        timeline:
          type: array
          items:
            type: object
            properties:
              _id:
                type: object
                properties:
                  year:
                    type: integer
                  month:
                    type: integer
                  day:
                    type: integer
              count:
                type: integer
        total:
          type: integer

    HealthCheckResponse:
      type: object
      properties:
        status:
          type: string
          enum: [ok, error]
        timestamp:
          type: string
          format: date-time
        version:
          type: string
        environment:
          type: string
        memoryUsage:
          type: object
          properties:
            heapUsed:
              type: integer
            heapTotal:
              type: integer
            external:
              type: integer
            rss:
              type: integer
        uptime:
          type: integer

paths:
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      operationId: register
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterRequest"
      responses:
        "201":
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "409":
          description: Email already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /auth/login:
    post:
      tags:
        - Authentication
      summary: Authenticate user and get token
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        "401":
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "423":
          description: Account locked
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /customers:
    post:
      tags:
        - Customers
      summary: Create a new customer
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Customer"
      responses:
        "201":
          description: Customer created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Customer"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /customers/{id}:
    get:
      tags:
        - Customers
      summary: Get customer by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Customer found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Customer"
        "404":
          description: Customer not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /customers/statistics:
    get:
      tags:
        - Customers
      summary: Get customer statistics
      security:
        - bearerAuth: []
      parameters:
        - name: fromDate
          in: query
          schema:
            type: string
            format: date-time
        - name: toDate
          in: query
          schema:
            type: string
            format: date-time
      responses:
        "200":
          description: Statistics retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerStatistics"

  /customers/groups:
    get:
      tags:
        - Customer Groups
      summary: List all customer groups
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - name: search
          in: query
          schema:
            type: string
      responses:
        "200":
          description: Groups retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  groups:
                    type: array
                    items:
                      $ref: "#/components/schemas/CustomerGroup"
                  total:
                    type: integer
                  pages:
                    type: integer

  /health:
    get:
      tags:
        - System
      summary: Get system health status
      responses:
        "200":
          description: System health information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthCheckResponse"

security:
  - bearerAuth: []
