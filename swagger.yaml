openapi: 3.0.0
info:
  title: Enterprise Backend API
  description: API documentation for the Enterprise Backend System
  version: 1.0.0
  contact:
    name: Development Team
    email: dev@example.com

servers:
  - url: http://localhost:4000/api/v1
    description: Development server
  - url: https://api.example.com/v1
    description: Production server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Error:
      type: object
      properties:
        status:
          type: string
          enum: [error]
        message:
          type: string
        code:
          type: string
        errors:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
              message:
                type: string
              code:
                type: string
              details:
                type: object

    Success:
      type: object
      properties:
        status:
          type: string
          enum: [success]
        message:
          type: string
        data:
          type: object

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 8
        deviceInfo:
          type: object
          properties:
            deviceId:
              type: string
            deviceType:
              type: string
            deviceName:
              type: string
            platform:
              type: string
            browserName:
              type: string
            browserVersion:
              type: string

    LoginResponse:
      type: object
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string
        user:
          type: object
          properties:
            id:
              type: string
            email:
              type: string
            firstName:
              type: string
            lastName:
              type: string
            roles:
              type: array
              items:
                type: string
            permissions:
              type: array
              items:
                type: string
        expiresIn:
          type: number

    RegisterRequest:
      type: object
      required:
        - email
        - password
        - firstName
        - lastName
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 8
        firstName:
          type: string
        lastName:
          type: string
        roles:
          type: array
          items:
            type: string
            enum: [admin, staff, user]
        deviceInfo:
          $ref: '#/components/schemas/DeviceInfo'

    DeviceInfo:
      type: object
      properties:
        deviceId:
          type: string
        deviceType:
          type: string
        deviceName:
          type: string
        platform:
          type: string
        browserName:
          type: string
        browserVersion:
          type: string

    CustomerRequest:
      type: object
      required:
        - name
        - phoneNumber
        - countryCode
        - assignedAdmin
      properties:
        name:
          type: string
        phoneNumber:
          type: string
          pattern: '^\+?[1-9]\d{1,14}$'
        countryCode:
          type: string
          pattern: '^[A-Z]{2}$'
        assignedAdmin:
          type: string
        status:
          type: string
          enum: [active, inactive, pending, blocked]
        customFields:
          type: object
        groups:
          type: array
          items:
            type: string
        tags:
          type: array
          items:
            type: string
        metadata:
          type: object

    WhatsAppMessage:
      type: object
      required:
        - to
        - type
        - content
      properties:
        to:
          type: string
          pattern: '^\+?[1-9]\d{1,14}$'
        type:
          type: string
          enum: [text, image, video, audio, document, location, template]
        content:
          type: object
        variables:
          type: object

    MediaUploadResponse:
      type: object
      properties:
        id:
          type: string
        originalName:
          type: string
        status:
          type: string
        type:
          type: string
        url:
          type: string

paths:
  # Customer Group Endpoints
  /customers/groups:
    post:
      tags:
        - Customer Groups
      summary: Create customer group
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  minLength: 2
                  maxLength: 100
                description:
                  type: string
                  maxLength: 500
                customFields:
                  type: array
                  items:
                    $ref: '#/components/schemas/CustomField'
                metadata:
                  type: object
      responses:
        '201':
          description: Customer group created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerGroupResponse'

    get:
      tags:
        - Customer Groups
      summary: List customer groups
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - in: query
          name: search
          schema:
            type: string
      responses:
        '200':
          description: List of customer groups
          content:
            application/json:
              schema:
                type: object
                properties:
                  groups:
                    type: array
                    items:
                      $ref: '#/components/schemas/CustomerGroupResponse'
                  total:
                    type: integer
                  pages:
                    type: integer

  /customers/groups/{id}:
    put:
      tags:
        - Customer Groups
      summary: Update customer group
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  minLength: 2
                  maxLength: 100
                description:
                  type: string
                  maxLength: 500
                customFields:
                  type: array
                  items:
                    $ref: '#/components/schemas/CustomField'
                metadata:
                  type: object
      responses:
        '200':
          description: Customer group updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerGroupResponse'

    delete:
      tags:
        - Customer Groups
      summary: Delete customer group
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Customer group deleted

    get:
      tags:
        - Customer Groups
      summary: Get customer group by ID
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Customer group details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerGroupResponse'

  /customers/groups/{id}/customers:
    post:
      tags:
        - Customer Groups
      summary: Add customers to group
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - customerIds
              properties:
                customerIds:
                  type: array
                  items:
                    type: string
                  minItems: 1
                  maxItems: 100
      responses:
        '200':
          description: Customers added to group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerGroupResponse'

    delete:
      tags:
        - Customer Groups
      summary: Remove customers from group
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - customerIds
              properties:
                customerIds:
                  type: array
                  items:
                    type: string
                  minItems: 1
                  maxItems: 100
      responses:
        '200':
          description: Customers removed from group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerGroupResponse'

  # Custom Field Endpoints
  /customers/fields:
    post:
      tags:
        - Custom Fields
      summary: Create custom field
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomFieldRequest'
      responses:
        '201':
          description: Custom field created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomFieldResponse'

    get:
      tags:
        - Custom Fields
      summary: List custom fields
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
      responses:
        '200':
          description: List of custom fields
          content:
            application/json:
              schema:
                type: object
                properties:
                  fields:
                    type: array
                    items:
                      $ref: '#/components/schemas/CustomFieldResponse'
                  total:
                    type: integer
                  pages:
                    type: integer

  /customers/fields/batch:
    patch:
      tags:
        - Custom Fields
      summary: Batch update custom fields
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - fields
              properties:
                fields:
                  type: array
                  items:
                    type: object
                    required:
                      - id
                      - updates
                    properties:
                      id:
                        type: string
                      updates:
                        $ref: '#/components/schemas/CustomFieldRequest'
      responses:
        '200':
          description: Custom fields updated
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CustomFieldResponse'

  /customers/fields/{fieldId}:
    put:
      tags:
        - Custom Fields
      summary: Update custom field
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: fieldId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomFieldRequest'
      responses:
        '200':
          description: Custom field updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomFieldResponse'

    delete:
      tags:
        - Custom Fields
      summary: Delete custom field
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: fieldId
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Custom field deleted

    get:
      tags:
        - Custom Fields
      summary: Get custom field by ID
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: fieldId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Custom field details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomFieldResponse'

  # Media Endpoints
  /media/upload:
    post:
      tags:
        - Media
      summary: Upload single file
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '201':
          description: File uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MediaUploadResponse'

  /media/bulk-upload:
    post:
      tags:
        - Media
      summary: Upload multiple files
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                files:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        '201':
          description: Files uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  successful:
                    type: array
                    items:
                      $ref: '#/components/schemas/MediaUploadResponse'
                  failed:
                    type: array
                    items:
                      type: object
                      properties:
                        originalName:
                          type: string
                        error:
                          type: string

  /media/{id}:
    get:
      tags:
        - Media
      summary: Get media by ID
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Media details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MediaResponse'

    delete:
      tags:
        - Media
      summary: Delete media
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Media deleted

  /media:
    get:
      tags:
        - Media
      summary: List media files
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - in: query
          name: type
          schema:
            type: string
            enum: [image, video, audio, document]
        - in: query
          name: status
          schema:
            type: string
            enum: [pending, uploading, uploaded, failed, deleted]
      responses:
        '200':
          description: List of media files
          content:
            application/json:
              schema:
                type: object
                properties:
                  media:
                    type: array
                    items:
                      $ref: '#/components/schemas/MediaResponse'
                  total:
                    type: integer
                  pages:
                    type: integer

  # WhatsApp Endpoints
  /whatsapp/webhook:
    get:
      tags:
        - WhatsApp
      summary: Verify webhook
      parameters:
        - in: query
          name: hub.mode
          required: true
          schema:
            type: string
        - in: query
          name: hub.verify_token
          required: true
          schema:
            type: string
        - in: query
          name: hub.challenge
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Webhook verified
          content:
            text/plain:
              schema:
                type: string

    post:
      tags:
        - WhatsApp
      summary: Handle webhook events
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebhookPayload'
      responses:
        '200':
          description: Webhook handled successfully

  /whatsapp/messages:
    post:
      tags:
        - WhatsApp
      summary: Send message
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WhatsAppMessage'
      responses:
        '200':
          description: Message sent successfully

  /whatsapp/messages/template:
    post:
      tags:
        - WhatsApp
      summary: Send template message
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - to
                - templateName
                - language
              properties:
                to:
                  type: string
                  pattern: '^\+?[1-9]\d{1,14}
  /auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '423':
          description: Account locked
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register new user
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: Registration successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /customers:
    post:
      tags:
        - Customers
      summary: Create new customer
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerRequest'
      responses:
        '201':
          description: Customer created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    get:
      tags:
        - Customers
      summary: List customers
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - in: query
          name: search
          schema:
            type: string
        - in: query
          name: status
          schema:
            type: string
            enum: [active, inactive, pending, blocked]
      responses:
        '200':
          description: List of customers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'

  /whatsapp/messages:
    post:
      tags:
        - WhatsApp
      summary: Send WhatsApp message
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WhatsAppMessage'
      responses:
        '200':
          description: Message sent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /media/upload:
    post:
      tags:
        - Media
      summary: Upload single file
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '201':
          description: File uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MediaUploadResponse'
        '400':
          description: Invalid file
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /calls/initiate:
    post:
      tags:
        - Calls
      summary: Initiate a call
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - customerId
                - phoneNumber
              properties:
                customerId:
                  type: string
                phoneNumber:
                  type: string
                  pattern: '^\+?[1-9]\d{1,14}$'
                timeLimit:
                  type: number
                  minimum: 60
                  maximum: 3600
      responses:
        '201':
          description: Call initiated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

security:
  - BearerAuth: []

tags:
  - name: Authentication
    description: Authentication endpoints
  - name: Customers
    description: Customer management endpoints
  - name: WhatsApp
    description: WhatsApp messaging endpoints
  - name: Media
    description: Media upload and management endpoints
  - name: Calls
    description: Call management endpoints
                templateName:
                  type: string
                language:
                  type: string
                  minLength: 2
                  maxLength: 2
                variables:
                  type: object
      responses:
        '200':
          description: Template message sent successfully

  /whatsapp/messages/bulk:
    post:
      tags:
        - WhatsApp
      summary: Send bulk messages
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - messages
              properties:
                messages:
                  type: array
                  items:
                    $ref: '#/components/schemas/WhatsAppMessage'
                  maxItems: 100
      responses:
        '200':
          description: Bulk messages sent successfully

  /whatsapp/conversations:
    get:
      tags:
        - WhatsApp
      summary: List conversations
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - in: query
          name: status
          schema:
            type: string
            enum: [active, expired, closed]
        - in: query
          name: type
          schema:
            type: string
            enum: [customer_initiated, business_initiated]
        - in: query
          name: startDate
          schema:
            type: string
            format: date-time
        - in: query
          name: endDate
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: List of conversations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConversationListResponse'

  /whatsapp/conversations/{id}/messages:
    get:
      tags:
        - WhatsApp
      summary: Get conversation history
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
      responses:
        '200':
          description: Conversation history
          content:
            application/json:
              schema:
                type: object
                properties:
                  messages:
                    type: array
                    items:
                      $ref: '#/components/schemas/MessageResponse'
                  total:
                    type: integer
                  page:
                    type: integer
                  pages:
                    type: integer

  /whatsapp/conversations/{id}/read:
    post:
      tags:
        - WhatsApp
      summary: Mark messages as read
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - messageIds
              properties:
                messageIds:
                  type: array
                  items:
                    type: string
                  minItems: 1
                  maxItems: 100
      responses:
        '200':
          description: Messages marked as read

  /whatsapp/customers/assigned:
    get:
      tags:
        - WhatsApp
      summary: Get assigned customers
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - in: query
          name: search
          schema:
            type: string
        - in: query
          name: status
          schema:
            type: string
            enum: [active, inactive, blocked]
      responses:
        '200':
          description: List of assigned customers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerListResponse'

components:
  schemas:
    CustomField:
      type: object
      required:
        - name
        - type
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 50
          pattern: '^[a-zA-Z][a-zA-Z0-9_]*
  /auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '423':
          description: Account locked
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register new user
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: Registration successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /customers:
    post:
      tags:
        - Customers
      summary: Create new customer
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerRequest'
      responses:
        '201':
          description: Customer created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    get:
      tags:
        - Customers
      summary: List customers
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - in: query
          name: search
          schema:
            type: string
        - in: query
          name: status
          schema:
            type: string
            enum: [active, inactive, pending, blocked]
      responses:
        '200':
          description: List of customers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'

  /whatsapp/messages:
    post:
      tags:
        - WhatsApp
      summary: Send WhatsApp message
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WhatsAppMessage'
      responses:
        '200':
          description: Message sent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /media/upload:
    post:
      tags:
        - Media
      summary: Upload single file
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '201':
          description: File uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MediaUploadResponse'
        '400':
          description: Invalid file
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /calls/initiate:
    post:
      tags:
        - Calls
      summary: Initiate a call
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - customerId
                - phoneNumber
              properties:
                customerId:
                  type: string
                phoneNumber:
                  type: string
                  pattern: '^\+?[1-9]\d{1,14}$'
                timeLimit:
                  type: number
                  minimum: 60
                  maximum: 3600
      responses:
        '201':
          description: Call initiated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

security:
  - BearerAuth: []

tags:
  - name: Authentication
    description: Authentication endpoints
  - name: Customers
    description: Customer management endpoints
  - name: WhatsApp
    description: WhatsApp messaging endpoints
  - name: Media
    description: Media upload and management endpoints
  - name: Calls
    description: Call management endpoints
        type:
          type: string
          enum: [text, number, date, boolean, list]
        required:
          type: boolean
          default: false
        listOptions:
          type: array
          items:
            type: string
        defaultValue:
          oneOf:
            - type: string
            - type: number
            - type: boolean
        description:
          type: string
          maxLength: 200
        validation:
          type: object
          properties:
            min:
              type: number
            max:
              type: number
            pattern:
              type: string
            message:
              type: string

    CustomFieldRequest:
      allOf:
        - $ref: '#/components/schemas/CustomField'
        - type: object
          properties:
            required:
              type: boolean
            listOptions:
              type: array
              items:
                type: string

    CustomFieldResponse:
      allOf:
        - $ref: '#/components/schemas/CustomField'
        - type: object
          required:
            - id
            - createdAt
            - updatedAt
          properties:
            id:
              type: string
            createdAt:
              type: string
              format: date-time
            updatedAt:
              type: string
              format: date-time

    CustomerGroupResponse:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        customFields:
          type: array
          items:
            $ref: '#/components/schemas/CustomField'
        customersCount:
          type: integer
        metadata:
          type: object
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    MediaResponse:
      type: object
      required:
        - id
        - originalName
        - mimeType
        - size
        - type
        - status
        - uploadedBy
      properties:
        id:
          type: string
        originalName:
          type: string
        mimeType:
          type: string
        size:
          type: integer
        type:
          type: string
          enum: [image, video, audio, document]
        url:
          type: string
        status:
          type: string
          enum: [pending, uploading, uploaded, failed, deleted]
        uploadedBy:
          type: string
        error:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    WebhookPayload:
      type: object
      required:
        - object
        - entry
      properties:
        object:
          type: string
          enum: [whatsapp_business_account]
        entry:
          type: array
          items:
            type: object
            required:
              - id
              - changes
            properties:
              id:
                type: string
              changes:
                type: array
                items:
                  type: object
                  required:
                    - value
                    - field
                  properties:
                    value:
                      type: object
                      required:
                        - messaging_product
                        - metadata
                      properties:
                        messaging_product:
                          type: string
                          enum: [whatsapp]
                        metadata:
                          type: object
                          required:
                            - display_phone_number
                            - phone_number_id
                          properties:
                            display_phone_number:
                              type: string
                            phone_number_id:
                              type: string
                        messages:
                          type: array
                          items:
                            $ref: '#/components/schemas/WebhookMessage'
                        statuses:
                          type: array
                          items:
                            $ref: '#/components/schemas/WebhookStatus'
                    field:
                      type: string

    WebhookMessage:
      type: object
      required:
        - from
        - id
        - timestamp
        - type
      properties:
        from:
          type: string
        id:
          type: string
        timestamp:
          type: string
        type:
          type: string
          enum: [text, image, video, audio, document, location, interactive, template]
        text:
          type: object
          properties:
            body:
              type: string
        interactive:
          type: object
          properties:
            type:
              type: string
            button_reply:
              type: object
              properties:
                id:
                  type: string
                title:
                  type: string

    WebhookStatus:
      type: object
      required:
        - id
        - status
        - timestamp
        - recipient_id
      properties:
        id:
          type: string
        status:
          type: string
          enum: [sent, delivered, read, failed]
        timestamp:
          type: string
        recipient_id:
          type: string
        conversation:
          type: object
          properties:
            id:
              type: string
            expiration_timestamp:
              type: string
            origin:
              type: object
              properties:
                type:
                  type: string
                  enum: [customer_initiated, business_initiated]
        pricing:
          type: object
          properties:
            billable:
              type: boolean
            pricing_model:
              type: string
            category:
              type: string
        errors:
          type: array
          items:
            type: object
            properties:
              code:
                type: integer
              title:
                type: string
              message:
                type: string
              error_data:
                type: object
                properties:
                  details:
                    type: string

    MessageResponse:
      type: object
      required:
        - id
        - messageId
        - from
        - to
        - type
        - status
        - timestamp
        - content
      properties:
        id:
          type: string
        messageId:
          type: string
        from:
          type: string
        to:
          type: string
        type:
          type: string
          enum: [text, image, video, audio, document, location, interactive, template]
        status:
          type: string
          enum: [sent, delivered, read, failed]
        timestamp:
          type: string
          format: date-time
        content:
          type: object
          required:
            - type
            - data
          properties:
            type:
              type: string
            data:
              type: object
        metadata:
          type: object

    ConversationListResponse:
      type: object
      required:
        - conversations
        - total
        - page
        - pages
      properties:
        conversations:
          type: array
          items:
            $ref: '#/components/schemas/ConversationResponse'
        total:
          type: integer
        page:
          type: integer
        pages:
          type: integer

    ConversationResponse:
      type: object
      required:
        - id
        - customerId
        - status
        - type
        - lastMessageAt
        - expiresAt
      properties:
        id:
          type: string
        customerId:
          type: string
        status:
          type: string
          enum: [active, expired, closed]
        type:
          type: string
          enum: [customer_initiated, business_initiated]
        lastMessageAt:
          type: string
          format: date-time
        expiresAt:
          type: string
          format: date-time
        metadata:
          type: object

    CustomerListResponse:
      type: object
      required:
        - customers
        - total
        - pages
      properties:
        customers:
          type: array
          items:
            $ref: '#/components/schemas/CustomerResponse'
        total:
          type: integer
        pages:
          type: integer

    CustomerResponse:
      type: object
      required:
        - id
        - name
        - phoneNumber
        - countryCode
        - assignedAdmin
        - status
      properties:
        id:
          type: string
        name:
          type: string
        phoneNumber:
          type: string
        countryCode:
          type: string
        assignedAdmin:
          type: object
          required:
            - id
            - email
            - firstName
            - lastName
          properties:
            id:
              type: string
            email:
              type: string
            firstName:
              type: string
            lastName:
              type: string
        status:
          type: string
          enum: [active, inactive, pending, blocked]
        customFields:
          type: object
        groups:
          type: array
          items:
            type: object
            required:
              - id
              - name
            properties:
              id:
                type: string
              name:
                type: string
        tags:
          type: array
          items:
            type: string
        lastActivity:
          type: string
          format: date-time
        metadata:
          type: object
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
  /auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '423':
          description: Account locked
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register new user
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: Registration successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /customers:
    post:
      tags:
        - Customers
      summary: Create new customer
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerRequest'
      responses:
        '201':
          description: Customer created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    get:
      tags:
        - Customers
      summary: List customers
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - in: query
          name: search
          schema:
            type: string
        - in: query
          name: status
          schema:
            type: string
            enum: [active, inactive, pending, blocked]
      responses:
        '200':
          description: List of customers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'

  /whatsapp/messages:
    post:
      tags:
        - WhatsApp
      summary: Send WhatsApp message
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WhatsAppMessage'
      responses:
        '200':
          description: Message sent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /media/upload:
    post:
      tags:
        - Media
      summary: Upload single file
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '201':
          description: File uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MediaUploadResponse'
        '400':
          description: Invalid file
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /calls/initiate:
    post:
      tags:
        - Calls
      summary: Initiate a call
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - customerId
                - phoneNumber
              properties:
                customerId:
                  type: string
                phoneNumber:
                  type: string
                  pattern: '^\+?[1-9]\d{1,14}$'
                timeLimit:
                  type: number
                  minimum: 60
                  maximum: 3600
      responses:
        '201':
          description: Call initiated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

security:
  - BearerAuth: []

tags:
  - name: Authentication
    description: Authentication endpoints
  - name: Customers
    description: Customer management endpoints
  - name: WhatsApp
    description: WhatsApp messaging endpoints
  - name: Media
    description: Media upload and management endpoints
  - name: Calls
    description: Call management endpoints