name: Build, Test, and Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [20.x]

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}

    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8
        run_install: false

    - name: Get pnpm store directory
      id: pnpm-cache
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

    - name: Setup pnpm cache
      uses: actions/cache@v4
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/package.json') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-

    - name: Install dependencies and generate lockfile
      run: |
        rm -f pnpm-lock.yaml
        pnpm install
        pnpm install --lockfile-only

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          node_modules
          ~/.pnpm-store
        key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-

    - name: Type check
      run: pnpm exec tsc --noEmit
      
    - name: Lint
      run: pnpm run lint:check
      
    - name: Run tests
      run: pnpm test
      env:
        CI: true

    - name: Build
      run: pnpm run build
      env:
        NODE_ENV: production

    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/
        retention-days: 1
        compression-level: 9

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/

    - name: Setup production files
      run: |
        cp package.json dist/
        cp pnpm-lock.yaml dist/

    - name: Deploy to FTP
      uses: SamKirkland/FTP-Deploy-Action@v4.3.4
      with:
        server: ${{ secrets.FTP_SERVER }}
        username: ${{ secrets.FTP_USERNAME }}
        password: ${{ secrets.FTP_PASSWORD }}
        local-dir: ./dist/
        server-dir: /
        dangerous-clean-slate: true
        security: strict
        timeout: 120000
        exclude: |
          **/.git*
          **/.git*/**
          **/node_modules/**
          test/**
          README.md

    - name: Verify deployment
      if: success()
      run: |
        echo "Deployment completed successfully"
        echo "Timestamp: $(date -u)"
      env:
        DEPLOY_TIME: ${{ steps.deploy.outputs.time }}

    - name: Notify on failure
      if: failure()
      run: |
        echo "Deployment failed"
        echo "Please check the logs for more information"